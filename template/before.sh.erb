# Export the module function if it exists
[[ $(type -t module) == "function" ]] && export -f module

# Find available port to run server on
port=8080

# Define Galaxy Variables
export GALAXY_PATH="<%= BatchConnect::App.from_token(session.token).root.realpath.join("galaxy").to_s %>"
export GALAXY_CONFIG_FILE="${PWD}/galaxy.yml"
MOUNT="/node/${HOSTNAME}/8080=galaxy.webapps.galaxy.buildapp:uwsgi_app()"
DATAROOT=${HOME}/.galaxy
EMAIL="${USER}@osc.edu"
export JOB_CONFIG_FILE_PATH="${PWD}/job_conf.xml"

echo "GALAXY location: '${GALAXY_PATH}'"
echo "Data location: '${DATAROOT}'"

# Load the required environment
<%-
  if context.node_type=="hugemem"
      ppn = 48
  elsif context.num_cores.blank?
      ppn = 28
  else
      ppn = context.num_cores.to_i
  end
-%>

# Generate Galaxy job configuration file
(
umask 077
cat > "${JOB_CONFIG_FILE_PATH}" << EOL
<?xml version="1.0"?>
<!-- A sample job config that explicitly configures job running the way it is configured by default (if there is no explicit config). -->
<job_conf>
    <plugins>
        <plugin id="pbs" type="runner" load="galaxy.jobs.runners.pbs:PBSJobRunner"/>
    </plugins>
    <destinations default="pbs_default">
        <destination id="pbs_default" runner="pbs">
            <param id="Resource_List">walltime=5:00:00,nodes=1:ppn=<%= ppn %></param>
            <param id="-p">128</param>
        </destination>
        <destination id="other_cluster" runner="pbs">
            <param id="destination">@other.cluster</param>
        </destination>
        <destination id="long_jobs" runner="pbs">
            <param id="Resource_List">walltime=5:00:00,nodes=1:ppn=1</param>
            <param id="-p">128</param>
            <param id="Output_Path"></param>
        </destination>
    </destinations>
</job_conf>
EOL
)

# Generate Galaxy configuration file
(
umask 077
cat > "${GALAXY_CONFIG_FILE}" << EOL
uwsgi:
  http: 0.0.0.0:8080
  buffer-size: 16384
  processes: 1
  threads: 4
  offload-threads: 2
  static-map: /static/style=static/style/blue
  static-map: /static=static
  static-map: /favicon.ico=static/favicon.ico
  master: false
  virtualenv: .venv
  pythonpath: lib
  mount: ${MOUNT}
  manage-script-name: true
  thunder-lock: false
  die-on-term: true
  hook-master-start: unix_signal:2 gracefully_kill_them_all
  hook-master-start: unix_signal:15 gracefully_kill_them_all
  py-call-osafterfork: true
  enable-threads: true
galaxy:
  data_dir: ${DATAROOT}
  single_user: ${EMAIL}
  tool_dependency_dir: ${GALAXY_PATH}/database/dependencies
EOL
)
